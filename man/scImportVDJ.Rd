% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/VDJ.utils.R
\name{scImportVDJ}
\alias{scImportVDJ}
\title{Resolve VDJ heavy chains multiplets}
\usage{
scImportVDJ(
  vdj_files,
  seurat = NULL,
  import_from_seurat = NULL,
  tech = c("BD", "10X"),
  remove_columns_on_import = list(`10X` = c("high_confidence", "raw_clonotype_id",
    "raw_consensus_id", "exact_subclonotype_id", "fwr1_aa", "fwr2_aa", "fwr3_aa",
    "fwr4_aa", "cdr1_aa", "cdr2_aa", "cdr3_aa"), BD = c("cell_type_experimental",
    "high_quality_cell_tcr_bcr", "sequence_aa", "sequence_aa_length",
    "sequence_alignment_length", "cdr3_length", "fwr1_aa", "fwr2_aa", "fwr3_aa",
    "fwr4_aa", "cdr1_aa", "cdr2_aa", "cdr3_aa", "germline_alignment_aa",
    "v_germline_alignment", "v_germline_alignment_aa", "d_germline_alignment",
    "d_germline_alignment_aa", 
     "j_germline_alignment", "j_germline_alignment_aa")),
  split.by = NULL,
  sample_id = NULL,
  analysis_name = "All_sequences",
  seq_type = c("Ig", "TCR"),
  organism = c("human", "mouse", "rabbit", "rat", "rhesus_monkey"),
  igblast = c("all", "filtered heavy", "none"),
  igblast_dir = "~/share/igblast/",
  imgt_dir = "~/share/germlines/imgt/",
  update_c_call = c("none", "filtered heavy", "all"),
  clean_HC = TRUE,
  cutoff = "variable",
  low_cutoff = 10,
  high_cutoff = 250,
  na.rm = FALSE,
  output = TRUE,
  output_folder = "VDJ_QC",
  cell_id = "cell_id",
  locus = "locus",
  heavy = "IGH",
  productive = "productive",
  complete_vdj = "complete_vdj",
  sequence_id = "sequence_id",
  umi_count = "umi_count",
  consensus_count = "consensus_count",
  junction = "junction",
  junction_aa = "junction_aa",
  sequence = "sequence",
  v_call = "v_call",
  d_call = "d_call",
  j_call = "j_call",
  c_call = "c_call"
)
}
\arguments{
\item{vdj_files}{a dataframe listing the data sets to import; first column should be "SB_analysis_id", "10X_lane_id" or defined by the following sample_id argument, other two expected columns should be "directory" and "filename" and will be used to reconstruct the full_path to the file to import, if a "full path" column is provided it will be used. (see attached excel spreadsheets - one for 10X and one for BD)}

\item{seurat}{a merged seurat V5 object on which to filter VDJ contigs or simply the metadata of a seurat object (seurat [[]])[better, more lightweight]}

\item{import_from_seurat}{vector of colnames to import from seurat metadata to the AIRR dataframe (option are Cartridge_Nb, donor_id, sample_tag, tissue, cluster...)}

\item{tech}{name of the scRNA-seq technology used (one of 10X or BD}

\item{split.by}{name of the column in the seurat object to use to split the dataset prior to filtering heavy chain [if NULL, switch to input "SB_analysis_id" or "10X_lane_id"]}

\item{sample_id}{name of the column containing the run name in the vdj_dir table [default = "SB_analysis_id" or "10X_lane_id"]; will be used to create unique cell_ids matching the one in the merged seurat object}

\item{analysis_name}{prefix to use for full fasta and tsv files being exported}

\item{igblast}{whether to run standalone IgBlast, can be set to c("filtered heavy" or "all") if not one of these three values, will be skipped with a warning. [default = "filtered heavy" for both 10X and BD: highly recommended for both to avoid issues at the createGermline() or observedMutation() steps due to different references databases used (10X) or missing imgt gaps in the sequence_alignment collumn (Both))]}

\item{igblast_dir}{path to igblast database [default = path suggested on installation: https://changeo.readthedocs.io/en/stable/examples/igblast.html]}

\item{imgt_dir}{path to imgt database [default = path suggested on installation: https://changeo.readthedocs.io/en/stable/examples/igblast.html]}

\item{update_c_call}{whether to run runBlastnC to correct c calls made by igblast (issues with calls with similar scores); can be set to c("heavy" or "all") if not one of these three values, will be skipped with a warning. [default = "heavy" for all cases, will be performed onlight chains after heavy chain clustering and light chain multiplets resolution (see scFindBCRClones())]}

\item{clean_HC}{whether to resolve cases of multiple heavy chains and identify doublets (resolveMultiHC())}

\item{cutoff}{choice of cutoff: can be set as "variable" (default) or "fixed";
if fixed, cutoffs should be provided or preset cutoffs will be used,
if variable [preferred option], cutoffs are automatically calculated based on summary counts in the database to account for potential sequencing bias (1st quartile and max of 10 or 1/10 of median).}

\item{low_cutoff}{cut_off for low probability heavy chain doublets.}

\item{high_cutoff}{cut_off for high probability heavy chain doublets.}

\item{na.rm}{whether to filter sequences without an identified CDR3.}

\item{output}{whether to output graphs with umi_counts for dominant versus second IGH VDJ contig and the recap excel workbook. If set to FALSE, only the corrected database is returned.}

\item{output_folder}{name of the folder in which graph and recap excel workbooks will be saved [default = "VDJ_QC"].}

\item{cell_id}{name of the column containing cell identifier.}

\item{locus}{name of column containing locus values.}

\item{heavy}{value of heavy chains in locus column. All other values will be
treated as light chains.}

\item{productive}{name of the column containing the info whether a given sequence is productive.}

\item{complete_vdj}{}

\item{sequence_id}{name of the column containing sequence identifier.}

\item{umi_count}{name of the column containing the number of unique molecules (UMI) for this contig. Previously called "duplicate_count" in an earlier AIRR standard}

\item{consensus_count}{name of the column containing the number of reads for this contig (usually called consensus_count)}

\item{junction}{name of the column containing identified junction in nucleotide format.}

\item{junction_aa}{name of the column containing identified junction in amino-acid format.}

\item{sequence}{name of the column containing the original sequence.}

\item{v_call}{name of the column containing V-segment allele assignments. All
entries in this column should be identical to the gene level.}

\item{d_call}{name of the column containing D-segment allele assignments. All
entries in this column should be identical to the gene level.}

\item{j_call}{name of the column containing J-segment allele assignments. All
entries in this column should be identical to the gene level.}

\item{c_call}{name of the column containing Constant region assignments. All
entries in this column should be identical to the gene level.}

\item{imgt_c_dir}{path to Blast-able imgt C gene database [default = path suggested in Create_IMGT_human_IG_C_Blastdb.R script]}
}
\value{
an AIRR formatted dataframe containing the dominant heavy chain selected for all cells, with the columns: is.VDJ_doublets, is.VDJ_doublet.confidence
and with the following columns added for cells with two or more heavy chains detected:
second_umi_count, second_concensus_count, second_sequence, second_junction, second_junction_aa, second_v_call, second_d_call, second_j_call, second_c_call.
Also outputs one graph and one recap excel workbook with filtered dataframe (sheet 1) and QC parameters (sheet 2) for each group of cells identified by the split.by argument [see resolveMultiHC()].
}
\description{
\code{scImportVDJ} import, run igblast and QC VDJ output or BD scRNA-seq datasets
}
\details{
1. will first import VDJ datasets listed in vdj_dir input dataframe and filter on cells in provided seurat V5 object;
2. will run igblast on filtered datasets if requested;
3. will run resolveMultiHC() to resolve HC multiplets
dependencies: Biostrings; igblast; AssignGene.py; MakeDb.py; dplyr; parallel, ggplot2 and openxlsx
}
